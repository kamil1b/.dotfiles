" Plug autoinstall
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

set nocompatible
filetype plugin on

call plug#begin('~/.vim/plugged')
" Common
" ============================================================================
Plug 'kien/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'michaeljsmith/vim-indent-object'
Plug 'myusuf3/numbers.vim'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sensible'
Plug 'sheerun/vim-polyglot'
" Plug 'wikitopian/hardmode'
Plug 'drmikehenry/vim-fixkey'
Plug 'kshenoy/vim-signature'
Plug 'mhinz/vim-startify'
Plug 'junegunn/goyo.vim'
Plug 't9md/vim-choosewin'

" Git
" ============================================================================
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Files
" ============================================================================
Plug 'scrooloose/nerdtree'

" Search
" ============================================================================
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Theme
" ============================================================================
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'logico-dev/typewriter'
Plug 'nightsense/stellarized'
Plug 'Yggdroot/indentLine'

" Vim cheatseeet
" ============================================================================
Plug 'lifepillar/vim-cheat40'

" Language support
" ============================================================================
" C++
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' }
" Plug 'vim-syntastic/syntastic'
Plug 'ludovicchabant/vim-gutentags'
Plug 'rhysd/vim-clang-format'
" Python
Plug 'nvie/vim-flake8'
Plug 'vim-scripts/indentpython.vim'
" Markdown
Plug 'godlygeek/tabular'
" Plug 'plasticboy/vim-markdown'
Plug 'retrohacker/asciidoc.vim'
" TTCN-3
Plug 'kamil1b/vim-ttcn3'
" Other
Plug 'w0rp/ale'

call plug#end()

" Configuration
" ============================================================================
" Common config
syntax enable
set encoding=utf-8
set number
set clipboard=unnamedplus
set scrolloff=3
set shell=/bin/bash
set list
set noswapfile
set undofile
set incsearch

" SipmlyFold
" let g:SimpylFold_docstring_preview = 1
" HardMode
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
" nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" YouCompileMe
" let g:ycm_error_sym = ''
" let g:ycm_warning_sym = ''
" let g:ycm_seed_identifiers_with_syntax = 1
" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" map <F6>  :YcmDiags<CR>

" Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" NERDTree
map <F3> :NERDTreeToggle<CR>
map ,t :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']

" Tagbar
map <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" FzF
map <F5> :Buffers<CR>
map <F6> :GFiles<CR>
map <F7> :Tags<CR>

" Choosewin
nmap  -  <Plug>(choosewin)
let g:choosewin_overlay_enable = 1

" Theme and look
" ============================================================================
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_contrast_light = 'soft'
set background=dark
" set foldmethod=syntax
set termguicolors

" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Look
set list
set updatetime=100

" GitGutter
map <F8> :GitGutterLineHighlightsToggle<CR>

" Markdown
let g:vim_markdown_folding_disabled = 1

" indentLine
let g:indentLine_setColors = 0

" Files settings
" ============================================================================

set expandtab autoindent fileformat=unix tabstop=4 softtabstop=4 shiftwidth=4

" Python
au FileType py setlocal textwidth=140

" c++
au FileType cpp,hpp setlocal textwidth=79
let g:clang_format#detect_style_file = 1
let g:clang_format#auto_format = 1


" Dockerfile
au BufNewFile,BufRead Dockerfile setlocal tabstop=2 softtabstop=2 shiftwidth=2

" Additional mapping ============================================================================
" Line movement
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv
